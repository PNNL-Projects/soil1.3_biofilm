---
jupyter: python3
---

```{python}
import warnings
warnings.filterwarnings("ignore")
import math, os, sys, copy, pickle
import numpy as np
import scipy as sp
import pandas as pd
from skimage import io, filters, restoration
from skimage import morphology as morph
import PIL
from PIL import Image, ImageSequence, ImageEnhance
# Make images higher resolution and set default size
import matplotlib
%matplotlib inline
matplotlib.rcParams['figure.dpi'] = 200
matplotlib.rcParams['figure.figsize'] = (5, 5)
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import glob
import cv2
import multipagetiff as mtif
import tifffile
import plotly.express as px
import plotly.graph_objs as go
import seaborn as sns
```

```{python}
def get_pop_density(img1d):
    pop_density = img1d/img1d.sum(axis=1, keepdims=True)
    return(pop_density)
def slide_sum_y_vol(img, slide_len = 100):
    img1d = np.count_nonzero(img, axis=0)
    img_slides = []
    for i in range(0, len(img1d) - slide_len):
        img_slides.append(np.sum(img1d[i:i+slide_len], axis=0))
    return(np.array(img_slides))
```

```{python}
work_dir = "/Users/feng626/workspace/data/soil1.3/spatial_interactions/"
result_dir = work_dir + "20220408/"
```

```{python}
rep1_samples = [['11.18.21_21', 'Nag', 0],
                ['11.19.21_08', 'Nag', 11],
                # ['11.19.21_18', 'Nag', 21],
                ['11.19.21_18', 'Nag', 22],
                ['11.20.21_10', 'Nag', 37],
                ['11.21.21_15', 'Nag', 66],
                ['11.22.21_15', 'Nag', 90],
                ['11.18.21_22', 'Chito5', 0],
                ['11.19.21_09', 'Chito5', 11],
                # ['11.19.21_19', 'Chito5', 21],
                ['11.19.21_19', 'Chito5', 22],
                ['11.20.21_11', 'Chito5', 37],
                ['11.21.21_16', 'Chito5', 66],
                ['11.22.21_16', 'Chito5', 90],
                ['11.18.21_23', 'Chitin', 0],
                ['11.19.21_10', 'Chitin', 11],
                # ['11.19.21_20', 'Chitin', 21],
                ['11.19.21_20', 'Chitin', 22],
                ['11.20.21_12', 'Chitin', 37],
                ['11.21.21_17', 'Chitin', 66],
                ['11.22.21_17', 'Chitin', 90]]
```

```{python}
rep2_samples = [["12.13.21_9PM", "Nag", 0],
                ["12.14.21_8AM", "Nag", 11],
                ["12.14.21_7PM", "Nag", 22],
                # ["12.15.21_8AM", "Nag", 35],
                ["12.15.21_8AM", "Nag", 37],
                ["12.16.21_3PM", "Nag", 66],
                ["12.17.21_3PM", "Nag", 90],
                ["12.13.21_10PM", "Chito5", 0],
                ["12.14.21_9AM", "Chito5", 11],
                ["12.14.21_8PM", "Chito5", 22],
                # ["12.15.21_9AM", "Chito5", 35],
                ["12.15.21_9AM", "Chito5", 37],
                ["12.16.21_4PM", "Chito5", 66],
                ["12.17.21_4PM", "Chito5", 90],
                ["12.13.21_11PM", "Chitin", 0],
                ["12.14.21_10AM", "Chitin", 11],
                ["12.14.21_9PM", "Chitin", 22],
                # ["12.15.21_10AM", "Chitin", 35],
                ["12.15.21_10AM", "Chitin", 37],
                ["12.16.21_5PM", "Chitin", 66],
                ["12.17.21_5PM", "Chitin", 90]]
```

```{python}
rep3_samples = [["02.07.22_9PM", "Nag", 0],
                ["02.08.22_8AM", "Nag", 11],
                ["02.08.22_7PM", "Nag", 22],
                ["02.09.22_10AM", "Nag", 37],
                ["02.10.22_3PM", "Nag", 66],
                ["02.11.22_3PM", "Nag", 90],
                ["02.07.22_10PM", "Chito5", 0],
                ["02.08.22_9AM", "Chito5", 11],
                ["02.08.22_8PM", "Chito5", 22],
                ["02.09.22_11AM", "Chito5", 37],
                ["02.10.22_4PM", "Chito5", 66],
                ["02.11.22_4PM", "Chito5", 90],
                ["02.07.22_11PM", "Chitin", 0],
                ["02.08.22_10AM", "Chitin", 11],
                ["02.08.22_9PM", "Chitin", 22],
                ["02.09.22_12PM", "Chitin", 37],
                ["02.10.22_5PM", "Chitin", 66],
                ["02.11.22_5PM", "Chitin", 90]]
```

```{python}
pop_densities = []
pop_volumes = []
for rep_samples, folder in zip([rep1_samples, rep2_samples, rep3_samples], ["Activity_1.3_rep" + str(i+1) for i in range(3)]):
    mask_dir = work_dir + folder + "_masks/"
    rep_dir = result_dir + folder    
    for sample in rep_samples:
        mask_file = mask_dir + sample[0] + '_' + sample[1] + "_1_w1SD BF_stitched_mask.tif"
        mask_array = io.imread(mask_file)
        mask_array[mask_array > 0] = 1
        mask_array = np.abs(mask_array - 1)
        rgb_file = rep_dir + '/' + sample[0] + '_' + sample[1] + "_1_combined_processed.pkl"
        with open(rgb_file, 'rb') as f:
            rgb_array = pickle.load(f)
        mask_vol = mask_array.sum()
        pops = rgb_array.sum(axis=(0,1))
        pop_volumes.append([folder.split('_')[2], sample[1], sample[2], pops[0], pops[1], pops[2], mask_vol])
        pop_den = pops / pops.sum()
        pop_densities.append([folder.split('_')[2], sample[1], sample[2], pop_den[0], pop_den[1], pop_den[2], mask_vol])
# pop_den_table = [list(pop_deni) for pop_deni in zip(*pop_densities)]

pop_den_df = pd.DataFrame(pop_densities, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Volume"])
pop_vol_df = pd.DataFrame(pop_volumes, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Volume"])
pop_vol_df["Total"] = pop_vol_df["Variovorax"] + pop_vol_df["Sphingopyxis"] + pop_vol_df["Rhodococcus"]
pop_vol_df["Variovorax / Volume"] = pop_vol_df["Variovorax"] / pop_vol_df["Volume"]
pop_vol_df["Sphingopyxis / Volume"] = pop_vol_df["Sphingopyxis"] / pop_vol_df["Volume"]
pop_vol_df["Rhodococcus/ Volume"] = pop_vol_df["Rhodococcus"] / pop_vol_df["Volume"]

pop_den_df.to_pickle(result_dir + "pop_densities.pkl")
pop_vol_df.to_pickle(result_dir + "pop_volumes.pkl")
```

```{python}
pop_den_df = pd.read_pickle(result_dir + "pop_densities.pkl")
pop_vol_df = pd.read_pickle(result_dir + "pop_volumes.pkl")
```

```{python}

```
```{python}
df = pop_den_df.copy()
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df[pop_den_df["Rep"] == "rep1"], 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep1.pdf")
```

```{python}
df = pop_den_df.copy()
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df[pop_den_df["Rep"] == "rep2"],
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep2.pdf")
```

```{python}
df = pop_den_df.copy()
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df[pop_den_df["Rep"] == "rep3"], 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep3.pdf")
```

```{python}
df = pop_den_df.copy()
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon", symbol="Rep")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep123.pdf")
```


```{python}
df = pop_den_df.copy()
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.update_layout(legend= {'itemsizing': 'constant'})
fig.show()
fig.write_image(result_dir + "rep123_all_reps.pdf")
```

```{python}
df = pop_den_df.copy()
df["Time"] = df["Time"].astype(str) + " h"
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         color="Time", symbol="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep123_all_reps_alt.pdf")
```

```{python}
df = pop_den_df.copy()
# df["Time"] = df["Time"].astype(str) + " h"
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         color="Time", symbol="Carbon", color_continuous_scale=px.colors.sequential.turbid)
fig.update_traces(marker={'size': 15})
fig.update_coloraxes(colorbar_x=1.0, colorbar_y=0.52)
fig.update_layout(legend_x=0.8, legend_y=1.0)
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep123_all_reps_alt_cont.pdf")
```

```{python}
df = pop_den_df.copy()
# df["Time"] = df["Time"].astype(str) + " h"
df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon")
# fig.update_coloraxes(colorbar_x=1.0, colorbar_y=0.52)
fig.update_layout(legend= {'itemsizing': 'trace'})
# fig.update_layout(legend_x=0.8, legend_y=1.0)
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "rep123_all_reps_alt_cont_size.pdf")
```

```{python}
slide_win = 500
mask_volumes_1d = []
pop_volumes_1d = []
delta_pop_volumes_1d = []
mask_density_1d = []
pop_densities_1d = []
delta_pop_densities_1d = []
for rep_samples, folder in zip([rep1_samples, rep2_samples, rep3_samples], ["Activity_1.3_rep" + str(i+1) for i in range(3)]):
    mask_dir = work_dir + folder + "_masks/"
    rep_dir = result_dir + folder + '/'    
    for sample in rep_samples:
        mask_file = mask_dir + sample[0] + '_' + sample[1] + "_1_w1SD BF_stitched_mask.tif"
        mask_array = io.imread(mask_file)
        mask_array[mask_array > 0] = 1
        mask_array = np.abs(mask_array - 1)
        rgb_file = rep_dir + sample[0] + '_' + sample[1] + "_1_combined_processed.pkl"
        with open(rgb_file, 'rb') as f:
            rgb_array = pickle.load(f)
        mask_vol = slide_sum_y_vol(mask_array, slide_win)
        pop_vol = slide_sum_y_vol(rgb_array, slide_win)
        for i in range(len(pop_vol)):
            pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0], pop_vol[i,1], pop_vol[i,2], i, mask_vol[i]])
            if i > 0:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-1,0], pop_vol[i,1] - pop_vol[i-1,1], pop_vol[i,2] - pop_vol[i-1,2], i, 1, mask_vol[i] - mask_vol[i-1]])
            if i >= 10:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-10,0], pop_vol[i,1] - pop_vol[i-10,1], pop_vol[i,2] - pop_vol[i-10,2], i, 10, mask_vol[i] - mask_vol[i-10]])
            if i >= 100:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-100,0], pop_vol[i,1] - pop_vol[i-100,1], pop_vol[i,2] - pop_vol[i-100,2], i, 100, mask_vol[i] - mask_vol[i-100]])
        pop_den = get_pop_density(slide_sum_y_vol(rgb_array, slide_win))
        for i in range(len(pop_den)):
            pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0], pop_den[i,1], pop_den[i,2], i, mask_vol[i]])
            if i > 0:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-1,0], pop_den[i,1] - pop_den[i-1,1], pop_den[i,2] - pop_den[i-1,2], i, 1, mask_vol[i] - mask_vol[i-1]])
            if i >= 10:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-10,0], pop_den[i,1] - pop_den[i-10,1], pop_den[i,2] - pop_den[i-10,2], i, 10, mask_vol[i] - mask_vol[i-10]])
            if i >= 100:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-100,0], pop_den[i,1] - pop_den[i-100,1], pop_den[i,2] - pop_den[i-100,2], i, 100, mask_vol[i] - mask_vol[i-100]])
# pop_den_table = [list(pop_deni) for pop_deni in zip(*pop_densities)]
```

```{python}
pop_vol_1d_df = pd.DataFrame(pop_volumes_1d, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Radius", "Volume"])
pop_vol_1d_df["Relative Volume"] = pop_vol_1d_df["Volume"] / pop_vol_1d_df["Volume"].max()
pop_vol_1d_df["Variovorax / Volume"] = pop_vol_1d_df["Variovorax"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df["Sphingopyxis / Volume"] = pop_vol_1d_df["Sphingopyxis"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df["Rhodococcus/ Volume"] = pop_vol_1d_df["Rhodococcus"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df["Total"] = pop_vol_1d_df["Variovorax"] + pop_vol_1d_df["Sphingopyxis"] + pop_vol_1d_df["Rhodococcus"]
pop_vol_1d_df["Total / Volume"] = pop_vol_1d_df["Total"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df.to_pickle(result_dir + "spatial/pop_vol_1d_df_" + str(slide_win) + ".pkl")
delta_pop_vol_1d_df = pd.DataFrame(delta_pop_volumes_1d, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Radius", "Step", "Volume"])
delta_pop_vol_1d_df.to_pickle(result_dir + "spatial/delta_pop_vol_1d_df_" + str(slide_win) + ".pkl")


pop_den_1d_df = pd.DataFrame(pop_densities_1d, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Radius", "Volume"])
pop_den_1d_df["Relative Volume"] = pop_den_1d_df["Volume"] / pop_den_1d_df["Volume"].max()
# pop_den_1d_df["Variovorax / Volume"] = pop_den_1d_df["Variovorax"] / pop_den_1d_df["Volume"]
# pop_den_1d_df["Sphingopyxis / Volume"] = pop_den_1d_df["Sphingopyxis"] / pop_den_1d_df["Volume"]
# pop_den_1d_df["Rhodococcus/ Volume"] = pop_den_1d_df["Rhodococcus"] / pop_den_1d_df["Volume"]
pop_den_1d_df.to_pickle(result_dir + "spatial/pop_den_1d_df_" + str(slide_win) + ".pkl")
delta_pop_den_1d_df = pd.DataFrame(delta_pop_densities_1d, columns = ["Rep", "Carbon", "Time", "Variovorax", "Sphingopyxis", "Rhodococcus", "Radius", "Step", "Volume"])
delta_pop_den_1d_df.to_pickle(result_dir + "spatial/delta_pop_den_1d_df_" + str(slide_win) + ".pkl")
```

```{python}
slide_win = 500
pop_vol_1d_df = pd.read_pickle(result_dir + "spatial/pop_vol_1d_df_" + str(slide_win) + ".pkl")
delta_pop_vol_1d_df = pd.read_pickle(result_dir + "spatial/delta_pop_vol_1d_df_" + str(slide_win) + ".pkl")
pop_den_1d_df = pd.read_pickle(result_dir + "spatial/pop_den_1d_df_" + str(slide_win) + ".pkl")
delta_pop_den_1d_df = pd.read_pickle(result_dir + "spatial/delta_pop_den_1d_df_" + str(slide_win) + ".pkl")
```


```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['Variovorax', 'Sphingopyxis', 'Rhodococcus', 'Relative Volume'], title='1D with Nag at 66h')
# fig.write_image(result_dir + "spatial/1D_with_Nag_at_66h_" + str(slide_win) + ".pdf")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['Variovorax', 'Sphingopyxis', 'Rhodococcus', 'Relative Volume'], title='1D with Chito5 at 66h')
# fig.write_image(result_dir + "spatial/1D_with_Chito5_at_66h_" + str(slide_win) + ".pdf")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['Variovorax', 'Sphingopyxis', 'Rhodococcus', 'Relative Volume'], title='1D with Chitin at 66h')
# fig.write_image(result_dir + "spatial/1D_with_Chitin_at_66h_" + str(slide_win) + ".pdf")
fig.show()
```

```{python}
# df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# # dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# fig = px.line_3d(dft, x='Variovorax', y='Sphingopyxis', z='Rhodococcus', title='1D with at 66h')
# fig.show()
```

```{python}
df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Radius"] % 100 == 0)].copy()
dft = df[(df["Carbon"] == "Chitin") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag")].copy()
dft = df[(df["Radius"] % 100 == 0)].copy()
# dft = df.copy()
fig = px.scatter_ternary(dft,
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         color="Relative Volume", color_continuous_scale="Viridis")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66) & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Chitin") & (df["Radius"] % 100 == 0)].copy()
# dft = df[(df["Carbon"] == "Nag")].copy()
dft = df[(df["Radius"] % 100 == 0)].copy()
# dft = df.copy()
fig = px.scatter_ternary(dft,
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         color="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
```

```{python}
# df = delta_pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")
#          & (df["Step"] == 10)
#          ].copy()
# # dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# fig = px.scatter_3d(dft.loc[(df[['Variovorax', 'Sphingopyxis', 'Rhodococcus']] != 0).all(axis=1)], x='Variovorax', y='Sphingopyxis', z='Rhodococcus', title='1D with at 66h')
# fig.update_traces(
#     marker=dict(size=2)
# )
# fig.show()
```

```{python}
fig = px.scatter(dft.loc[(df[['Variovorax', 'Sphingopyxis', 'Rhodococcus']] != 0).all(axis=1)], x='Variovorax', y='Sphingopyxis', title='1D with at 66h')
fig.update_traces(
    marker=dict(size=2)
)
fig.show()
```

```{python}
fig = px.scatter(dft.loc[(df[['Variovorax', 'Sphingopyxis', 'Rhodococcus']] != 0).all(axis=1)], x='Rhodococcus', y='Sphingopyxis', title='1D with at 66h')
fig.update_traces(
    marker=dict(size=2)
)
fig.show()
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep1") & ((pop_den_1d_df["Radius"] == 0 + slide_win//2) | (pop_den_1d_df["Radius"] == 750 + slide_win//2) | (pop_den_1d_df["Radius"] == 1500 + slide_win//2) | (pop_den_1d_df["Radius"] == 2250 + slide_win//2) | (pop_den_1d_df["Radius"] == 3000 + slide_win//2))]
df4plot["Time"] = (df4plot["Time"]) / 5 + 2
fig = px.scatter_ternary(df4plot,
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "spatial/1Drep1_" + str(slide_win) + ".pdf")
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep2") & ((pop_den_1d_df["Radius"] == 0 + slide_win//2) | (pop_den_1d_df["Radius"] == 750 + slide_win//2) | (pop_den_1d_df["Radius"] == 1500 + slide_win//2) | (pop_den_1d_df["Radius"] == 2250 + slide_win//2) | (pop_den_1d_df["Radius"] == 3000 + slide_win//2))]
df4plot["Time"] = (df4plot["Time"]) / 5 + 2
fig = px.scatter_ternary(df4plot, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "spatial/1Drep2_" + str(slide_win) + ".pdf")
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep3") & ((pop_den_1d_df["Radius"] == 0 + slide_win//2) | (pop_den_1d_df["Radius"] == 750 + slide_win//2) | (pop_den_1d_df["Radius"] == 1500 + slide_win//2) | (pop_den_1d_df["Radius"] == 2250 + slide_win//2) | (pop_den_1d_df["Radius"] == 3000 + slide_win//2))]
df4plot["Time"] = (df4plot["Time"]) / 5 + 2
fig = px.scatter_ternary(df4plot, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
fig.write_image(result_dir + "spatial/1Drep3_" + str(slide_win) + ".pdf")
```


```{python}
times = [0, 11, 22, 37, 66, 90]
```

```{python}
df = pop_den_1d_df.copy()
color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue', 'Relative Volume': 'grey'}
for time in times:
    for rep in ["rep" + str(i+1) for i in range(3)]:
        dfr = df[(df["Time"] == time) & (df["Rep"] == rep)].copy()
        # ymax = dfr[['Variovorax', 'Sphingopyxis', 'Rhodococcus']].values.flatten().max()
        for carbon in ["Nag", "Chito5", "Chitin"]:
            dft = dfr[(dfr["Carbon"] == carbon)].copy()
            fig = px.line(dft, x='Radius', y=['Variovorax', 'Sphingopyxis', 'Rhodococcus', 'Relative Volume'], title="Population density of " + rep + " with " + carbon + " at " + str(time) + "h", color_discrete_map=color_map, template="ggplot2")
            # fig.show()
            fig.write_image(result_dir + "spatial/exploratory/pop_den_" + rep +"_with_" + carbon + "_at_" + str(time) + "h_" + str(slide_win) + ".pdf", scale=1, width=1000, height=500)
```

```{python}
df = pop_vol_1d_df.copy()
# color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue', 'Volume': 'grey'}
color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
for carbon in ["Nag", "Chito5", "Chitin"]:
    for rep in ["rep" + str(i+1) for i in range(3)]:
        dfr = df[(df["Carbon"] == carbon) & (df["Rep"] == rep)].copy()
        ymax = dfr[['Variovorax', 'Sphingopyxis', 'Rhodococcus']].values.flatten().max()
        for time in times:
            dft = dfr[(dfr["Time"] == time)].copy()
            # vol_scalor = dft[['Variovorax', 'Sphingopyxis', 'Rhodococcus']].values.flatten().max() / dft["Volume"].max()
            # dft["Volume"] = dft["Volume"] * vol_scalor
            fig = px.line(dft, x='Radius', y=['Variovorax', 'Sphingopyxis', 'Rhodococcus'], title="Population size of " + rep + " with " + carbon + " at " + str(time) + "h", color_discrete_map=color_map, template="ggplot2")
            fig.update_layout(yaxis_range=[0,ymax])
            # fig.show()
            fig.write_image(result_dir + "spatial/exploratory/pop_vol_" + rep +"_with_" + carbon + "_at_" + str(time) + "h_" + str(slide_win) + ".pdf", scale=1, width=1000, height=500)
```


```{python}
df = pop_vol_1d_df.copy()
color_map = {'Variovorax / Volume': 'red', 'Sphingopyxis / Volume': 'green', 'Rhodococcus/ Volume': 'blue', 'Relative Volume': 'grey'}
for time in times:
    for rep in ["rep" + str(i+1) for i in range(3)]:
        dfr = df[(df["Time"] == time) & (df["Rep"] == rep)].copy()
        ymax = dfr[['Variovorax', 'Sphingopyxis', 'Rhodococcus']].values.flatten().max()
        for carbon in ["Nag", "Chito5", "Chitin"]:
            dft = dfr[(dfr["Carbon"] == carbon)].copy()
            vol_scalor = dft[['Variovorax / Volume', 'Sphingopyxis / Volume', 'Rhodococcus/ Volume']].values.flatten().max() / dft["Relative Volume"].max()
            dft["Relative Volume"] = dft["Relative Volume"] * vol_scalor
            fig = px.line(dft, x='Radius', y=['Variovorax / Volume', 'Sphingopyxis / Volume', 'Rhodococcus/ Volume', 'Relative Volume'], title="Population size of " + rep + " with " + carbon + " at " + str(time) + "h", color_discrete_map=color_map, template="ggplot2")
            # fig.show()
            fig.write_image(result_dir + "spatial/exploratory/pop_rel_vol_" + rep +"_with_" + carbon + "_at_" + str(time) + "h_" + str(slide_win) + ".pdf", scale=1, width=1000, height=500)
```




```{python}

```

# Analyze all data

```{python}
slide_win = 500
pop_den = pd.read_pickle(result_dir + "pop_densities.pkl")
pop_vol = pd.read_pickle(result_dir + "pop_volumes.pkl")
pop_den_1d_df = pd.read_pickle(result_dir + "spatial/pop_den_1d_df_" + str(slide_win) + ".pkl")
delta_pop_den_1d_df = pd.read_pickle(result_dir + "spatial/delta_pop_den_1d_df_" + str(slide_win) + ".pkl")
pop_vol_1d_df = pd.read_pickle(result_dir + "spatial/pop_vol_1d_df_" + str(slide_win) + ".pkl")
delta_pop_vol_1d_df = pd.read_pickle(result_dir + "spatial/delta_pop_vol_1d_df_" + str(slide_win) + ".pkl")
```

```{python}
sns.set_style("white")
matplotlib.rcParams['figure.dpi'] = 200
matplotlib.rcParams['figure.figsize'] = (4, 4)

```

```{python}
sns.boxplot(data=pop_vol, x="Time", y="Total", hue="Carbon")
plt.savefig(result_dir + "boxplot_total_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Variovorax", hue="Carbon")
plt.savefig(result_dir + "boxplot_Vp_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Sphingopyxis", hue="Carbon")
plt.savefig(result_dir + "boxplot_Sf_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Rhodococcus", hue="Carbon")
plt.savefig(result_dir + "boxplot_Rh_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
```

```{python}
sns.boxplot(data=pop_vol, x="Time", y="Total", hue="Carbon")
plt.yscale("log")
plt.savefig(result_dir + "boxplot_total_volume_log.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Variovorax", hue="Carbon")
plt.yscale("log")
plt.savefig(result_dir + "boxplot_Vp_volume_log.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Sphingopyxis", hue="Carbon")
plt.yscale("log")
plt.savefig(result_dir + "boxplot_Sf_volume_log.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol, x="Time", y="Rhodococcus", hue="Carbon")
plt.yscale("log")
plt.savefig(result_dir + "boxplot_Rh_volume_log.pdf", bbox_inches='tight', dpi=300)
plt.close()
```

```{python}

pop_vol_melted = pd.melt(pop_vol, id_vars=["Time", "Carbon"], value_vars=["Total", "Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Biomass")

color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Species"] != "Total") & (pop_vol_melted["Carbon"] == "Nag")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.legend([],[], frameon=False)
plt.savefig(result_dir + "boxplot_Nag_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Species"] != "Total") & (pop_vol_melted["Carbon"] == "Chito5")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.legend([],[], frameon=False)
plt.savefig(result_dir + "boxplot_Chito5_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Species"] != "Total") & (pop_vol_melted["Carbon"] == "Chitin")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.savefig(result_dir + "boxplot_Chitin_volume.pdf", bbox_inches='tight', dpi=300)
plt.close()

color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue', 'Total': 'grey'}
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Carbon"] == "Nag")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.legend([],[], frameon=False)
plt.savefig(result_dir + "boxplot_Nag_volume_with_tot.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Carbon"] == "Chito5")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.legend([],[], frameon=False)
plt.savefig(result_dir + "boxplot_Chito5_volume_with_tot.pdf", bbox_inches='tight', dpi=300)
plt.close()
sns.boxplot(data=pop_vol_melted[(pop_vol_melted["Carbon"] == "Chitin")], x="Time", y="Biomass", hue="Species", palette=color_map)
plt.ylim(0, 7e9)
plt.savefig(result_dir + "boxplot_Chitin_volume_with_tot.pdf", bbox_inches='tight', dpi=300)
plt.close()
```

```{python}
df = pop_vol_1d_df.copy()
df = df[['Time', 'Carbon', 'Variovorax / Volume', 'Sphingopyxis / Volume', 'Rhodococcus/ Volume', 'Relative Volume', 'Radius']].copy()
df = df[(df["Time"] >22) & (df["Radius"] % 25 == 0)]
# color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
# sns.scatterplot(data=df, y="Variovorax / Volume", x="Relative Volume", hue="Carbon")
sns.scatterplot(data=df, y="Sphingopyxis / Volume", x="Relative Volume", hue="Carbon")
# sns.scatterplot(data=df, y="Rhodococcus/ Volume", x="Relative Volume", hue="Carbon")
plt.close()
```

```{python}
df = pop_vol_1d_df.copy()
# df = df[df["Time"] == 37 & (df["Rep"] == 'rep2')]
df["dv_dvol"] = np.gradient(df["Variovorax / Volume"], df["Relative Volume"])
df["ds_dvol"] = np.gradient(df["Sphingopyxis / Volume"], df["Relative Volume"])
df["dr_dvol"] = np.gradient(df["Rhodococcus/ Volume"], df["Relative Volume"])
df["dv_drad"] = np.gradient(df["Variovorax / Volume"], df["Radius"])
df["ds_drad"] = np.gradient(df["Sphingopyxis / Volume"], df["Radius"])
df["dr_drad"] = np.gradient(df["Rhodococcus/ Volume"], df["Radius"])
df["dvol_drad"] = np.gradient(df["Relative Volume"], df["Radius"])
df["Habitate size"] = np.nan
df.loc[df["Relative Volume"] < 0.4, "Habitate size"] = "Small (0.2~0.4)"
df.loc[(df["Relative Volume"] >= 0.5) & (df["Relative Volume"] < 0.7), "Habitate size"] = "Medium (0.5~0.7)"
df.loc[df["Relative Volume"] >= 0.8, "Habitate size"] = "Large (0.8~1.0)"
# color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
# sns.scatterplot(data=df, y="Variovorax / Volume", x="Relative Volume", hue="Carbon")
# sns.scatterplot(data=df, y="Sphingopyxis / Volume", x="Relative Volume", hue="Carbon")
# sns.scatterplot(data=df, y="Rhodococcus/ Volume", x="Relative Volume", hue="Carbon")

# sns.scatterplot(data=df, y="Variovorax", x="Relative Volume", hue="Carbon")
sns.scatterplot(data=df, y="Sphingopyxis", x="Volume", hue="Carbon")
# sns.scatterplot(data=df, y="Rhodococcus", x="Relative Volume", hue="Carbon")

# sns.scatterplot(data=df, y="dv_dvol", x="ds_dvol", hue="Carbon")

plt.close()
```

```{python}
df = pop_vol_1d_df.copy()
df["Habitate size"] = np.nan
df.loc[df["Relative Volume"] < 0.3, "Habitate size"] = "Small (0.2~0.4)"
df.loc[(df["Relative Volume"] >= 0.4) & (df["Relative Volume"] < 0.7), "Habitate size"] = "Medium (0.5~0.7)"
df.loc[df["Relative Volume"] >= 0.8, "Habitate size"] = "Large (0.8~1.0)"
# df.loc[df["Relative Volume"] < 0.2, "Habitate size"] = "[0,0.2)"
# df.loc[df["Relative Volume"] < 0.1, "Habitate size"] = "[0,0.1)"
# df.loc[(df["Relative Volume"] >= 0.1) & (df["Relative Volume"] < 0.2), "Habitate size"] = "[0.1,0.2)"
# df.loc[(df["Relative Volume"] >= 0.2) & (df["Relative Volume"] < 0.3), "Habitate size"] = "[0.2,0.3)"
# df.loc[(df["Relative Volume"] >= 0.3) & (df["Relative Volume"] < 0.4), "Habitate size"] = "[0.3,0.4)"
# df.loc[(df["Relative Volume"] >= 0.4) & (df["Relative Volume"] < 0.5), "Habitate size"] = "[0.4,0.5)"
# df.loc[(df["Relative Volume"] >= 0.5) & (df["Relative Volume"] < 0.6), "Habitate size"] = "[0.5,0.6)"
# df.loc[(df["Relative Volume"] >= 0.6) & (df["Relative Volume"] < 0.7), "Habitate size"] = "[0.6,0.7)"
# df.loc[(df["Relative Volume"] >= 0.7) & (df["Relative Volume"] < 0.8), "Habitate size"] = "[0.7,0.8)"
# df.loc[(df["Relative Volume"] >= 0.8) & (df["Relative Volume"] < 0.9), "Habitate size"] = "[0.8,0.9)"
# df.loc[df["Relative Volume"] >= 0.9, "Habitate size"] = "[0.9,1.0)"
# df.loc[df["Relative Volume"] >= 0.8, "Habitate size"] = "[0.8,1.0]"
# df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Total", "Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Biomass")
# color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue', 'Total': 'grey'}
df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Biomass")
color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
# df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Variovorax / Volume", "Sphingopyxis / Volume", "Rhodococcus/ Volume"], var_name="Species", value_name="Biomass / Habitate size")
# color_map = {'Variovorax / Volume': 'red', 'Sphingopyxis / Volume': 'green', 'Rhodococcus/ Volume': 'blue'}

df4plot = df4plot.loc[df4plot["Time"] == 90]
df4plot = df4plot.loc[df4plot["Biomass"] > 0]
# sns.boxplot(data=df4plot[df4plot["Time"] == 90 & (df4plot["Carbon"] == "Nag")], x="Habitate size", y="Biomass", hue="Species", palette=color_map, sym = "")
# sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Nag")], x="Habitate size", y="Biomass", hue="Species", palette=color_map, sym = "")
sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Chito5")], x="Habitate size", y="Biomass", hue="Species", palette=color_map, sym = "")
# sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Chitin")], x="Habitate size", y="Biomass", hue="Species", palette=color_map, sym = "")
# plt.ylim(1, 1.5e4)
# plt.yscale("log")

plt.close()
```

```{python}
df = pop_den_1d_df.copy()
# df = df.loc[((df[["Variovorax", "Sphingopyxis", "Rhodococcus"]] != 0).all(axis=1)) & (df["Rep"] == "rep2")].copy()
df = df.loc[(df[["Variovorax", "Sphingopyxis", "Rhodococcus"]] != 0).all(axis=1)].copy()
df["Habitate size"] = np.nan
# df.loc[df["Relative Volume"] < 0.3, "Habitate size"] = "Small"
df.loc[(df["Relative Volume"] < 0.4) & (df["Relative Volume"] > 0.2), "Habitate size"] = "(0.2~0.4)"
df.loc[(df["Relative Volume"] > 0.4) & (df["Relative Volume"] < 0.6), "Habitate size"] = "(0.4~0.6)"
df.loc[(df["Relative Volume"] > 0.6) & (df["Relative Volume"] < 0.8), "Habitate size"] = "(0.6~0.8)"
# df.loc[(df["Relative Volume"] > 0.5) & (df["Relative Volume"] < 0.7), "Habitate size"] = "(0.5~0.7)"
# df.loc[df["Relative Volume"] >= 0.8, "Habitate size"] = "Large"
df.loc[df["Relative Volume"] > 0.8, "Habitate size"] = "(0.8~1.0)"
df.loc[df["Relative Volume"] < 0.2, "Habitate size"] = "(0.0~0.2)"
# df.loc[df["Relative Volume"] < 0.1, "Habitate size"] = "[0,0.1)"
# df.loc[(df["Relative Volume"] > 0.1) & (df["Relative Volume"] < 0.2), "Habitate size"] = "[0.1,0.2)"
# df.loc[(df["Relative Volume"] > 0.2) & (df["Relative Volume"] < 0.3), "Habitate size"] = "[0.2,0.3)"
# df.loc[(df["Relative Volume"] > 0.3) & (df["Relative Volume"] < 0.4), "Habitate size"] = "[0.3,0.4)"
# df.loc[(df["Relative Volume"] > 0.4) & (df["Relative Volume"] < 0.5), "Habitate size"] = "[0.4,0.5)"
# df.loc[(df["Relative Volume"] > 0.5) & (df["Relative Volume"] < 0.6), "Habitate size"] = "[0.5,0.6)"
# df.loc[(df["Relative Volume"] > 0.6) & (df["Relative Volume"] < 0.7), "Habitate size"] = "[0.6,0.7)"
# df.loc[(df["Relative Volume"] > 0.7) & (df["Relative Volume"] < 0.8), "Habitate size"] = "[0.7,0.8)"
# df.loc[(df["Relative Volume"] > 0.8) & (df["Relative Volume"] < 0.9), "Habitate size"] = "[0.8,0.9)"
# df.loc[df["Relative Volume"] > 0.9, "Habitate size"] = "[0.9,1.0)"
# df.loc[df["Relative Volume"] > 0.8, "Habitate size"] = "[0.8,1.0]"
# df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Total", "Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Density")
# color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue', 'Total': 'grey'}
df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Density")
color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}
# df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate size", "Radius", "Relative Volume"], value_vars=["Variovorax / Volume", "Sphingopyxis / Volume", "Rhodococcus/ Volume"], var_name="Species", value_name="Density / Habitate size")
# color_map = {'Variovorax / Volume': 'red', 'Sphingopyxis / Volume': 'green', 'Rhodococcus/ Volume': 'blue'}

df4plot = df4plot.loc[(df4plot["Density"] > 0)].copy()
# df4plot = df4plot.loc[df4plot["Time"] == 37]
# sns.boxplot(data=df4plot[df4plot["Time"] == 90 & (df4plot["Carbon"] == "Nag")], x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "")
# sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Nag")], x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "")
# sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Chito5")], x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "")
# sns.boxplot(data=df4plot[(df4plot["Carbon"] == "Chitin")], x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "")
# plt.ylim(1, 1.5e4)
# plt.yscale("log")

matplotlib.rcParams['figure.figsize'] = (3, 3)

for time in [11, 37, 90]:
    for carbon in ["Nag", "Chito5", "Chitin"]:
        df4plot2 = df4plot.loc[(df4plot["Time"] == time) & (df4plot["Carbon"] == carbon)].copy()
        sns.boxplot(data=df4plot2, x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "")
        plt.legend([],[], frameon=False)
        plt.savefig(result_dir + "density_vs_habitate_size_" + carbon + "_at_" + str(time) + "pdf", bbox_inches='tight', dpi=300)
        plt.close()



df4plot2 = df4plot.loc[(df4plot["Density"] > 0) & (df4plot["Time"].isin([11,37,90]))].copy()
# df4plot2 = df4plot.loc[(df4plot["Density"] > 0) & (df4plot["Time"].isin([11,37,90])) & (df["Rep"] == "rep2")].copy()
# remap = {0: "Early", 11: "Early", 22:"Middle", 37:"Middle", 66:"Late", 90:"Late"}
# df4plot2 = df4plot.replace({"Time": remap})

plt.figure(figsize=(2, 2))
g = sns.FacetGrid(df4plot2, col="Carbon",  row="Time", margin_titles=True, despine=False, sharey=True, sharex=True)
g.map_dataframe(sns.boxplot, x="Habitate size", y="Density", hue="Species", palette=color_map, sym = "", order=["(0.2~0.4)", "(0.4~0.6)", "(0.6~0.8)", "(0.8~1.0)"])
g.add_legend()
plt.savefig(result_dir + "density_vs_habitate_size_all.pdf", bbox_inches='tight', dpi=300)

```

```{python}
df = pop_vol_1d_df.copy()
df["Habitate position"] = np.nan
df.loc[df["Radius"] < 1500, "Habitate position"] = "Left"
df.loc[(df["Radius"] >= 1500) & (df["Radius"] < 3000), "Habitate position"] = "Middle"
df.loc[df["Radius"] >= 3000, "Habitate position"] = "Right"
df4plot = pd.melt(df, id_vars=["Time", "Carbon", "Habitate position", "Radius", "Relative Volume"], value_vars=["Variovorax", "Sphingopyxis", "Rhodococcus"], var_name="Species", value_name="Biomass")
color_map = {'Variovorax': 'red', 'Sphingopyxis': 'green', 'Rhodococcus': 'blue'}

df4plot = df4plot.loc[df4plot["Biomass"] > 0]


for time in [11, 37, 90]:
    for carbon in ["Nag", "Chito5", "Chitin"]:
        df4plot2 = df4plot.loc[df4plot["Time"] == time & (df4plot["Carbon"] == carbon)]
        sns.boxplot(data=df4plot2, x="Habitate position", y="Biomass", hue="Species", palette=color_map, sym = "")
        plt.legend([],[], frameon=False)
        plt.yscale("log")
        plt.savefig(result_dir + "biomass_vs_habitate_position_" + carbon + "_at_" + str(time) + "pdf", bbox_inches='tight', dpi=300)
        plt.close()

```

```{python}
df = pop_den_1d_df.copy()
# df = df[df["Time"] == 90 & (df["Rep"] == 'rep2') & (df["Carbon"] == 'Nag')]
df = df[df["Time"] == 90 & (df["Rep"] == 'rep2')]
# df["Time"] = df["Time"].astype(str) + " h"
# df["Time"] = (df["Time"]) / 5 + 2
fig = px.scatter_ternary(df, 
                         a='Variovorax', b='Sphingopyxis', c='Rhodococcus', 
                         color="Relative Volume", symbol="Carbon")
fig.update_coloraxes(colorbar_x=1.0, colorbar_y=0.52)
# fig.update_layout(legend= {'itemsizing': 'trace'})
fig.update_layout(legend_x=0.8, legend_y=1.0)
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
# fig.write_image(result_dir + "test.pdf")
fig.show()
```

```{python}


```


