---
jupyter: python3
---

```{python}
import warnings
warnings.filterwarnings("ignore")
import math, os, sys, copy, pickle
import numpy as np
import scipy as sp
import pandas as pd
from skimage import io, filters, restoration
from skimage import morphology as morph
import PIL
from PIL import Image, ImageSequence, ImageEnhance
# Make images higher resolution and set default size
import matplotlib
%matplotlib inline
matplotlib.rcParams['figure.dpi'] = 200
matplotlib.rcParams['figure.figsize'] = (6, 6)
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import make_axes_locatable
import glob
import cv2
import multipagetiff as mtif
import tifffile
import plotly.express as px
import plotly.graph_objs as go
import seaborn as sns
```

```{python}
def get_pop_density(img1d):
    pop_density = img1d/img1d.sum(axis=1, keepdims=True)
    return(pop_density)
def slide_sum_y_vol(img, slide_len = 100):
    img1d = np.count_nonzero(img, axis=0)
    img_slides = []
    for i in range(0, len(img1d) - slide_len):
        img_slides.append(np.sum(img1d[i:i+slide_len], axis=0))
    return(np.array(img_slides))
```

```{python}
work_dir = "/Users/feng626/workspace/data/SoilSFA/spatial_interactions/"
```

```{python}
rep1_samples = [['11.18.21_21', 'Nag', 0],
                ['11.19.21_08', 'Nag', 11],
                # ['11.19.21_18', 'Nag', 21],
                ['11.19.21_18', 'Nag', 22],
                ['11.20.21_10', 'Nag', 37],
                ['11.21.21_15', 'Nag', 66],
                ['11.22.21_15', 'Nag', 90],
                ['11.18.21_22', 'Chito5', 0],
                ['11.19.21_09', 'Chito5', 11],
                # ['11.19.21_19', 'Chito5', 21],
                ['11.19.21_19', 'Chito5', 22],
                ['11.20.21_11', 'Chito5', 37],
                ['11.21.21_16', 'Chito5', 66],
                ['11.22.21_16', 'Chito5', 90],
                ['11.18.21_23', 'Chitin', 0],
                ['11.19.21_10', 'Chitin', 11],
                # ['11.19.21_20', 'Chitin', 21],
                ['11.19.21_20', 'Chitin', 22],
                ['11.20.21_12', 'Chitin', 37],
                ['11.21.21_17', 'Chitin', 66],
                ['11.22.21_17', 'Chitin', 90]]
```

```{python}
rep2_samples = [["12.13.21_9PM", "Nag", 0],
                ["12.14.21_8AM", "Nag", 11],
                ["12.14.21_7PM", "Nag", 22],
                # ["12.15.21_8AM", "Nag", 35],
                ["12.15.21_8AM", "Nag", 37],
                ["12.16.21_3PM", "Nag", 66],
                ["12.17.21_3PM", "Nag", 90],
                ["12.13.21_10PM", "Chito5", 0],
                ["12.14.21_9AM", "Chito5", 11],
                ["12.14.21_8PM", "Chito5", 22],
                # ["12.15.21_9AM", "Chito5", 35],
                ["12.15.21_9AM", "Chito5", 37],
                ["12.16.21_4PM", "Chito5", 66],
                ["12.17.21_4PM", "Chito5", 90],
                ["12.13.21_11PM", "Chitin", 0],
                ["12.14.21_10AM", "Chitin", 11],
                ["12.14.21_9PM", "Chitin", 22],
                # ["12.15.21_10AM", "Chitin", 35],
                ["12.15.21_10AM", "Chitin", 37],
                ["12.16.21_5PM", "Chitin", 66],
                ["12.17.21_5PM", "Chitin", 90]]
```

```{python}
rep3_samples = [["02.07.22_9PM", "Nag", 0],
                ["02.08.22_8AM", "Nag", 11],
                ["02.08.22_7PM", "Nag", 22],
                ["02.09.22_10AM", "Nag", 37],
                ["02.10.22_3PM", "Nag", 66],
                ["02.11.22_3PM", "Nag", 90],
                ["02.07.22_10PM", "Chito5", 0],
                ["02.08.22_9AM", "Chito5", 11],
                ["02.08.22_8PM", "Chito5", 22],
                ["02.09.22_11AM", "Chito5", 37],
                ["02.10.22_4PM", "Chito5", 66],
                ["02.11.22_4PM", "Chito5", 90],
                ["02.07.22_11PM", "Chitin", 0],
                ["02.08.22_10AM", "Chitin", 11],
                ["02.08.22_9PM", "Chitin", 22],
                ["02.09.22_12PM", "Chitin", 37],
                ["02.10.22_5PM", "Chitin", 66],
                ["02.11.22_5PM", "Chitin", 90]]
```

```{python}
result_dir = work_dir + "20220408/"
pop_densities = []
for rep_samples, folder in zip([rep1_samples, rep2_samples, rep3_samples], ["Activity_1.3_rep" + str(i+1) for i in range(3)]):
    rep_dir = result_dir + folder    
    for sample in rep_samples:
        rgb_file = rep_dir + '/' + sample[0] + '_' + sample[1] + "_1_combined_processed.pkl"
        with open(rgb_file, 'rb') as f:
            rgb_array = pickle.load(f)
        pops = rgb_array.sum(axis=(0,1))
        pop_den = pops / pops.sum()
        pop_densities.append([folder.split('_')[2], sample[1], sample[2], pop_den[0], pop_den[1], pop_den[2]])
# pop_den_table = [list(pop_deni) for pop_deni in zip(*pop_densities)]
```

```{python}
rgb_array.shape
```

```{python}
pop_den_df = pd.DataFrame(pop_densities, columns = ["Rep", "Carbon", "Time", "V. paradoxus", "S. fribergensis", "Rhodococcus spp."])
pop_den_df.head()
```

```{python}
fig = px.scatter_ternary(pop_den_df[pop_den_df["Rep"] == "rep1"], 
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image(result_dir + "rep1.pdf")
fig.show()
```

```{python}
fig = px.scatter_ternary(pop_den_df[pop_den_df["Rep"] == "rep2"],
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image(result_dir + "rep2.pdf")
fig.show()
```

```{python}
fig = px.scatter_ternary(pop_den_df[pop_den_df["Rep"] == "rep3"], 
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image(result_dir + "rep3.pdf")
fig.show()
```

```{python}
fig = px.scatter_ternary(pop_den_df, 
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon", symbol="Rep")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image(result_dir + "rep123.pdf")
fig.show()
```

```{python}
slide_win = 100
result_dir = work_dir + "20220408/"
mask_volumes_1d = []
pop_volumes_1d = []
delta_pop_volumes_1d = []
mask_density_1d = []
pop_densities_1d = []
delta_pop_densities_1d = []
for rep_samples, folder in zip([rep1_samples, rep2_samples, rep3_samples], ["Activity_1.3_rep" + str(i+1) for i in range(3)]):
    mask_dir = work_dir + folder + "_masks/"
    rep_dir = result_dir + folder + '/'    
    for sample in rep_samples:
        mask_file = mask_dir + sample[0] + '_' + sample[1] + "_1_w1SD BF_stitched_mask.tif"
        mask_array = io.imread(mask_file)
        mask_array[mask_array > 0] = 1
        mask_array = np.abs(mask_array - 1)
        rgb_file = rep_dir + sample[0] + '_' + sample[1] + "_1_combined_processed.pkl"
        with open(rgb_file, 'rb') as f:
            rgb_array = pickle.load(f)
        mask_vol = slide_sum_y_vol(mask_array, slide_win)
        pop_vol = slide_sum_y_vol(rgb_array, slide_win)
        for i in range(len(pop_vol)):
            pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0], pop_vol[i,1], pop_vol[i,2], i + slide_win//2, mask_vol[i]])
            if i > 0:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-1,0], pop_vol[i,1] - pop_vol[i-1,1], pop_vol[i,2] - pop_vol[i-1,2], i + slide_win//2, 1, mask_vol[i] - mask_vol[i-1]])
            if i >= 10:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-10,0], pop_vol[i,1] - pop_vol[i-10,1], pop_vol[i,2] - pop_vol[i-10,2], i + slide_win//2, 10, mask_vol[i] - mask_vol[i-10]])
            if i >= 100:
                delta_pop_volumes_1d.append([folder.split('_')[2], sample[1], sample[2], pop_vol[i,0] - pop_vol[i-100,0], pop_vol[i,1] - pop_vol[i-100,1], pop_vol[i,2] - pop_vol[i-100,2], i + slide_win//2, 100, mask_vol[i] - mask_vol[i-100]])
        pop_den = get_pop_density(slide_sum_y_vol(rgb_array, slide_win))
        for i in range(len(pop_den)):
            pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0], pop_den[i,1], pop_den[i,2], i + slide_win//2, mask_vol[i]])
            if i > 0:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-1,0], pop_den[i,1] - pop_den[i-1,1], pop_den[i,2] - pop_den[i-1,2], i + slide_win//2, 1, mask_vol[i] - mask_vol[i-1]])
            if i >= 10:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-10,0], pop_den[i,1] - pop_den[i-10,1], pop_den[i,2] - pop_den[i-10,2], i + slide_win//2, 10, mask_vol[i] - mask_vol[i-10]])
            if i >= 100:
                delta_pop_densities_1d.append([folder.split('_')[2], sample[1], sample[2], pop_den[i,0] - pop_den[i-100,0], pop_den[i,1] - pop_den[i-100,1], pop_den[i,2] - pop_den[i-100,2], i + slide_win//2, 100, mask_vol[i] - mask_vol[i-100]])
# pop_den_table = [list(pop_deni) for pop_deni in zip(*pop_densities)]
```

```{python}
pop_vol_1d_df = pd.DataFrame(pop_volumes_1d, columns = ["Rep", "Carbon", "Time", "V. paradoxus", "S. fribergensis", "Rhodococcus spp.", "Radius", "Volume"])
pop_vol_1d_df["Relative Volume"] = pop_vol_1d_df["Volume"] / pop_vol_1d_df["Volume"].max()
pop_vol_1d_df["V. paradoxus / Volume"] = pop_vol_1d_df["V. paradoxus"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df["S. fribergensis / Volume"] = pop_vol_1d_df["S. fribergensis"] / pop_vol_1d_df["Volume"]
pop_vol_1d_df["Rhodococcus spp. / Volume"] = pop_vol_1d_df["Rhodococcus spp."] / pop_vol_1d_df["Volume"]
pop_vol_1d_df.to_pickle(result_dir + "pop_vol_1d_df.pkl")
delta_pop_vol_1d_df = pd.DataFrame(delta_pop_volumes_1d, columns = ["Rep", "Carbon", "Time", "V. paradoxus", "S. fribergensis", "Rhodococcus spp.", "Radius", "Step", "Volume"])
delta_pop_vol_1d_df.to_pickle(result_dir + "delta_pop_vol_1d_df.pkl")


pop_den_1d_df = pd.DataFrame(pop_densities_1d, columns = ["Rep", "Carbon", "Time", "V. paradoxus", "S. fribergensis", "Rhodococcus spp.", "Radius", "Volume"])
pop_den_1d_df["Relative Volume"] = pop_den_1d_df["Volume"] / pop_den_1d_df["Volume"].max()
# pop_den_1d_df["V. paradoxus / Volume"] = pop_den_1d_df["V. paradoxus"] / pop_den_1d_df["Volume"]
# pop_den_1d_df["S. fribergensis / Volume"] = pop_den_1d_df["S. fribergensis"] / pop_den_1d_df["Volume"]
# pop_den_1d_df["Rhodococcus spp. / Volume"] = pop_den_1d_df["Rhodococcus spp."] / pop_den_1d_df["Volume"]
pop_den_1d_df.to_pickle(result_dir + "pop_den_1d_df.pkl")
delta_pop_den_1d_df = pd.DataFrame(delta_pop_densities_1d, columns = ["Rep", "Carbon", "Time", "V. paradoxus", "S. fribergensis", "Rhodococcus spp.", "Radius", "Step", "Volume"])
delta_pop_den_1d_df.to_pickle(result_dir + "delta_pop_den_1d_df.pkl")
```

```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.', 'Relative Volume'], title='1D with Nag at 66h')
fig.write_image(result_dir + "1D_with_Nag_at_66h.pdf")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Chito5") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.', 'Relative Volume'], title='1D with Chito5 at 66h')
fig.write_image(result_dir + "1D_with_Chito5_at_66h.pdf")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Chitin") & (df["Time"] == 66)].copy()
fig = px.line(dft, x='Radius', y=['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.', 'Relative Volume'], title='1D with Chitin at 66h')
fig.write_image(result_dir + "1D_with_Chitin_at_66h.pdf")
fig.show()
```

```{python}
# df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# # dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# fig = px.line_3d(dft, x='V. paradoxus', y='S. fribergensis', z='Rhodococcus spp.', title='1D with at 66h')
# fig.show()
```

```{python}
df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
# dft = df[(df["Carbon"] == "Nag")].copy()
dft = df.copy()
fig = px.scatter_ternary(dft,
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         color="Relative Volume")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
```

```{python}
df = pop_den_1d_df.copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")].copy()
dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
fig = px.scatter_ternary(dft,
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         color="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.show()
```

```{python}
df = delta_pop_den_1d_df.copy()
dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66) & (df["Rep"] == "rep3")
         & (df["Step"] == 10)
         ].copy()
# dft = df[(df["Carbon"] == "Nag") & (df["Time"] == 66)].copy()
fig = px.scatter_3d(dft.loc[(df[['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.']] != 0).all(axis=1)], x='V. paradoxus', y='S. fribergensis', z='Rhodococcus spp.', title='1D with at 66h')
fig.update_traces(
    marker=dict(size=2)
)
fig.show()
```

```{python}
fig = px.scatter(dft.loc[(df[['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.']] != 0).all(axis=1)], x='V. paradoxus', y='S. fribergensis', title='1D with at 66h')
fig.update_traces(
    marker=dict(size=2)
)
fig.show()
```

```{python}
fig = px.scatter(dft.loc[(df[['V. paradoxus', 'S. fribergensis', 'Rhodococcus spp.']] != 0).all(axis=1)], x='Rhodococcus spp.', y='S. fribergensis', title='1D with at 66h')
fig.update_traces(
    marker=dict(size=2)
)
fig.show()
```



```{python}
pop_den_1d_df["Radius"].max()
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep1") & ((pop_den_1d_df["Radius"] == 0) | (pop_den_1d_df["Radius"] == 750) | (pop_den_1d_df["Radius"] == 1500) | (pop_den_1d_df["Radius"] == 2250) | (pop_den_1d_df["Radius"] == 3000))]
fig = px.scatter_ternary(df4plot,
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image("results/1Drep1.pdf")
fig.show()
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep2") & ((pop_den_1d_df["Radius"] == 0) | (pop_den_1d_df["Radius"] == 750) | (pop_den_1d_df["Radius"] == 1500) | (pop_den_1d_df["Radius"] == 2250) | (pop_den_1d_df["Radius"] == 3000))]
fig = px.scatter_ternary(df4plot, 
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image("results/1Drep2.pdf")
fig.show()
```

```{python}
df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep3") & ((pop_den_1d_df["Radius"] == 0) | (pop_den_1d_df["Radius"] == 750) | (pop_den_1d_df["Radius"] == 1500) | (pop_den_1d_df["Radius"] == 2250) | (pop_den_1d_df["Radius"] == 3000))]
fig = px.scatter_ternary(df4plot, 
                         a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
                         size="Time", color="Carbon", symbol="Radius")
fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
fig.write_image("results/1Drep3.pdf")
fig.show()
```

```{python}
# df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep3") & ((pop_den_1d_df["Radius"] == 0) | (pop_den_1d_df["Radius"] == 750) | (pop_den_1d_df["Radius"] == 1500) | (pop_den_1d_df["Radius"] == 2250) | (pop_den_1d_df["Radius"] == 3000))]
# df4plot = pop_den_1d_df[(pop_den_1d_df["Rep"] == "rep3") & (pop_den_1d_df["Carbon"] == "Nag") & (pop_den_1d_df["Radius"] % 500 == 0)]
# fig = px.line_ternary(df4plot, 
#                          a='V. paradoxus', b='S. fribergensis', c='Rhodococcus spp.', 
#                          line_group="Time", color="Radius")
# fig.update_ternaries(aaxis_color="red", baxis_color="green", caxis_color="blue")
# fig.write_image("results/1Drep3_alt.pdf")
# fig.show()
```

```{python}

```


